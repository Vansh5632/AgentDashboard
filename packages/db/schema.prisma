// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // This will point to your PostgreSQL database
}

// 1. Tenant Model: Represents a customer's entire organization.
model Tenant {
  id        String      @id @default(cuid())
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  users     User[]      // A tenant can have multiple users
  agentBots AgentBot[]  // A tenant can have multiple agent bots
  callLogs  CallLog[]   // All call logs belong to a tenant
  meetingCredentials MeetingCredential? // One set of meeting credentials per tenant
  meetings  Meeting[]   // All meetings belong to a tenant

  @@index([createdAt])
}

// 2. User Model: Represents an individual user who can log in.
model User {
  id            String       @id @default(cuid())
  email         String       @unique
  passwordHash  String       // We will store a hashed password, NEVER a plain one.
  tenantId      String
  tenant        Tenant       @relation(fields: [tenantId], references: [id])
  credentials   Credential[] // A user can have multiple credentials (e.g., Cal.com, GHL)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([tenantId])
  @@index([email, tenantId])
}

// 3. AgentBot Model: Stores the configuration for an AI agent.
// Note: We only need the ElevenLabs API key - agent_id comes from webhooks
model AgentBot {
  id         String   @id @default(cuid())
  name       String
  elevenLabsAgentId String? @unique // ElevenLabs agent ID (auto-populated from webhook)
  phoneNumber String?  @unique // The phone number (auto-populated from webhook)
  agentPhoneNumberId String? // ElevenLabs phone number ID (auto-fetched from API)
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  
  // These are now optional since config is in ElevenLabs
  persona    String?  @db.Text // Optional: local copy of persona
  elevenLabsVoiceId String? // Optional: voice ID if needed locally
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([tenantId])
  @@index([phoneNumber])
  @@index([tenantId, createdAt])
  @@index([elevenLabsAgentId])
}

// 4. Credential Model: Securely stores encrypted API keys for a user.
model Credential {
  id            String   @id @default(cuid())
  serviceName   String   // e.g., "ELEVENLABS", "CALCOM", "GHL"
  encryptedValue String   // The API key, encrypted.
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())

  @@index([userId])
  @@index([userId, serviceName])
}

// 5. CallLog Model: Stores data for each call made.
model CallLog {
  id            String   @id @default(cuid())
  conversationId String   @unique // From ElevenLabs
  status        String   // e.g., "COMPLETED", "FAILED", "NO_PICKUP", "CALLBACK_NEEDED", "CALLBACK_SCHEDULED", "CALLBACK_COMPLETED"
  summary       String?  @db.Text
  transcript    String?  @db.Text
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  
  // Callback-related fields
  customerPhoneNumber String?  // Phone number to call back
  agentId       String?        // Which agent should make the callback (ElevenLabs agent_id)
  agentPhoneNumber String?     // Original agent phone number used for the call
  agentPhoneNumberId String?   // ElevenLabs phone number ID for outbound calls
  callbackRequested Boolean  @default(false) // Was a callback requested?
  callbackScheduledAt DateTime? // When to make the callback
  callbackReason String?  @db.Text // Why callback is needed
  callbackAttempts Int     @default(0) // How many callback attempts made
  callbackCompletedAt DateTime? // When callback was successfully completed
  
  // Additional ElevenLabs metadata
  leadStatus    String?        // Lead status from ElevenLabs analysis
  finalState    String?        // Final FSM state from ElevenLabs
  callDuration  Int?           // Call duration in seconds
  
  createdAt     DateTime @default(now())

  @@index([tenantId])
  @@index([conversationId])
  @@index([tenantId, status])
  @@index([tenantId, createdAt])
  @@index([callbackScheduledAt]) // For finding callbacks to execute
  @@index([tenantId, callbackRequested])
  @@index([customerPhoneNumber]) // For querying by phone number
  @@index([agentId])
}

// 6. MeetingCredential Model: Stores Cal.com API keys and n8n webhook URLs per tenant
model MeetingCredential {
  id            String   @id @default(cuid())
  tenantId      String   @unique // One set of credentials per tenant
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  
  // Cal.com credentials
  calcomApiKey  String?  @db.Text // Encrypted Cal.com API key
  
  // n8n webhook URLs (deprecated - kept for backward compatibility)
  n8nAvailabilityWebhook String? @db.Text // n8n webhook to check availability
  n8nBookingWebhook      String? @db.Text // n8n webhook to confirm booking
  
  // GoHighLevel (GHL) webhook for WhatsApp notifications
  ghlWhatsappWebhook     String? @db.Text // GHL workflow webhook to send WhatsApp messages
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([tenantId])
}

// 7. Meeting Model: Stores meeting bookings and their status
model Meeting {
  id            String   @id @default(cuid())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  
  // Meeting details
  customerName  String?
  customerEmail String?
  customerPhoneNumber String?
  meetingTime   DateTime
  duration      Int      @default(30) // Duration in minutes
  timezone      String   @default("UTC")
  
  // Status tracking
  status        String   // "PENDING", "CONFIRMED", "FAILED", "CANCELLED", "WHATSAPP_SENT", "WHATSAPP_FAILED"
  calcomEventId String?  // Cal.com event/booking ID
  
  // Related to which conversation/call
  conversationId String? // Optional: Link to CallLog
  agentId       String?  // Which agent was involved
  
  // Cal.com response data (full booking details)
  calcomResponse String?  @db.Text // JSON response from Cal.com API
  meetingLink   String?  @db.Text // Direct meeting link (Zoom/Google Meet/etc)
  
  // WhatsApp notification tracking
  whatsappSent  Boolean  @default(false) // Was WhatsApp message sent?
  whatsappSentAt DateTime? // When was WhatsApp sent?
  whatsappError String?  @db.Text // If WhatsApp sending failed
  
  // Additional metadata
  notes         String?  @db.Text
  errorMessage  String?  @db.Text // If booking failed
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([tenantId])
  @@index([conversationId])
  @@index([tenantId, status])
  @@index([tenantId, meetingTime])
  @@index([customerEmail])
  @@index([customerPhoneNumber])
  @@index([whatsappSent])
}